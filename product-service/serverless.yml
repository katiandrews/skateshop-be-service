service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-auto-swagger
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SQS_QUEUE_URL:
      Ref: ProductsQueue
    PRODUCTS_SNS_ARN: 
      Ref: ProductsTopic
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ ProductsQueue, Arn ]
    - Effect: Allow
      Action:
        - sns:*
      Resource:
        Ref: ProductsTopic

functions:
  getProductsList:
    handler: functions/getProductsList.default
    events:
      - httpApi:
          method: get
          path: /products
          responses: {
            200: {
              description: 'List of products',
              bodyType:  'ProductsResponse',
            },
            400: {
              description: Invalid request,
              bodyType:  'ErrorResponse',
            },
            500: {
              description: Invalid request,
              bodyType:  'ErrorResponse',
            }
          }
  getProductsById:
    handler: functions/getProductsById.default
    events:
      - httpApi:
          method: get
          path: /products/{productId}
          responses: {
            200: {
              description: 'Product info',
              bodyType:  'ProductResponse',
            },
            400: {
              description: Invalid request,
              bodyType:  'ErrorResponse',
            },
            500: {
              description: Invalid request,
              bodyType:  'ErrorResponse',
            }
          }
  createProduct:
    handler: functions/createProduct.default
    events:
      - httpApi:
          method: post
          path: /products
          bodyType: 'NewProduct'
          responses: {
            200: {
              description: 'Product is added to database',
              bodyType: 'ProductAdded',
            },
            400: {
              description: Invalid request,
              bodyType:  'ErrorResponse',
            },
            500: {
              description: Invalid request,
              bodyType:  'ErrorResponse',
            }
          }
  catalogBatchProcess:
    handler: functions/catalogBatchProcess.default
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ProductsQueue
              - Arn
          batchSize: 5

resources:
  Resources: 
    ProductsQueue:
      Type: "AWS::SQS::Queue"
      Properties: 
        QueueName: "catalogItemsQueue"
        ReceiveMessageWaitTimeSeconds: 20
    ProductsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
        Subscription: 
          - Endpoint: ekaterina_andriushina@epam.com
            Protocol: email
        


custom:
    autoswagger:
        title: 'Product service'
        generateSwaggerOnDeploy: true
        typefiles: ['./types/products.d.ts', './types/errors.d.ts']